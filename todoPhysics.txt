
DEADLINES

running program implementing ball movement in a plane (08.06.)
running program implementing collisions with boxes in a plane (10.06)


TO DO ITEMS
ORDERED
write test class for ball movement 	(x)

write adapter for game configurator abstracting entities (x)
write main class	(x)

integrate movement with main (~06.06.) 	(x)

determine components needed for hole	 (x)
implement hole components 	(x)
implement system checking whether ball is in hole (target zone) and removing the ball and the player if this is the case. 	(x)
test hole mechanism	 (X)
integrate hole mechanism with main (x)

write test class for collisions using solids consisting of a single solid (x)
redo special entities (x)
adapt game to changed special entities (x) no longer relevant
integrate single-solid collisions with main (~08.06.)(x)

physics report outline (x)
write down formulas used (x)

write test for gravity (x)
write test for gravity/normal force interaction on plane (x)
write test for grativy/normal force interaction on slope (x)
consider edge collision in normal force system
implement generic bisection (x)
test bisection (x)
implement non penetration system	(x)
integrate gravity/normal force with main (~10.06.) (x)	

write test class for player transition (x)
integrate players & transition with main (x)
implement update of next player element when removing players from the engine (x)

implement observer pattern in game (x)

find a way to get input from player and bot (x)
implement input methods (x)

integrate way to add listeners to engine in system factories (change interface to abstract class)	(x)
require priority in system factories (~12.06.) 	(x)

adapt collider closest side finder to work if active is not within passive (x)
apply friction only when touching obstacle (x)
redo movement test (x)

add proper extrinsic state to flyweight solids (x)
adapt code relying on solids (solid/body/entity intersection detector) (x)
write test for multi-solid obstacles (x)
integrate multi-solid obstacles (~13.06.)	(x)

test tetrahedron intersection (x)
test sphere tetrahedrizer	(x)
use sphere tetrahedrizer in game configurator (~14.06)

describe physics already implemented in report (x)
isolate topics relevant for presentation	(x)
make presentation (~15.06)

initial integration test 	(x)
fix: normal force being applied multiple times lifts ball	(x)
fix: normal force being applied if ball does not push on surface 	(x)
fix: collision reaction tolerance while keeping friction & normal force updated
finish integration testing

choose method for differential equations	(x)
do generic implementation of differential equation solver
adapt existing systems to work with DE solver
re run tests

momentum split if two moving entities collide

UNORDERED
write adapter for game abstracting entities
separate game state (entities+components) from game logic (systems)
think whether to represent sides as plane
write history components and systems properly
revise rounding in ALL systems
implement game result class + exporter
improve finding collision plane
